SwiftyJSON.swift
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public struct JSON
	public func ==(lhs: JSON, rhs: JSON) -> Bool
	public func <=(lhs: JSON, rhs: JSON) -> Bool
	public func >=(lhs: JSON, rhs: JSON) -> Bool
	public func >(lhs: JSON, rhs: JSON) -> Bool
	public func <(lhs: JSON, rhs: JSON) -> Bool
	public func ==(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func !=(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func <(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func >(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func <=(lhs: NSNumber, rhs: NSNumber) -> Bool
	public func >=(lhs: NSNumber, rhs: NSNumber) -> Bool
	public struct JSON
NSValue.h
	class NSNumber : NSValue
NutellaLocationDelegate.swift
	func resourceUpdated(resource: NLManagedResource)
	func resourceEntered(dynamicResource: NLManagedResource, staticResource: NLManagedResource)
	func resourceExited(dynamicResource: NLManagedResource, staticResource: NLManagedResource)
NutellaNetRequest.swift
	struct NutellaNetRequest
Dictionary.swift
	mutating func update(other:Dictionary)
NutellaMain.swift
	var componentId: String
	var runId: String
	public var resourceId: String?
	public init(brokerHostname: String, runId: String, componentId: String)
NutellaLocation.swift
	class NLBeacon
	class NLResource
	weak var delegate: NLManagedResourceDelegate?
	weak var resource: NLResource?
	init(resource: NLResource, delegate: NLManagedResourceDelegate?)
	override init(resource: NLResource, delegate: NLManagedResourceDelegate?)
	override var delegate: NLManagedResourceDelegate?
	public var model: NLResourceModel?
	public var type: NLResourceType?
	public var rid: String?
	public var trackingSystem: NLResourceTrackingSystem?
	public var continuous: NLManagedResourceContinuous
	public var discrete: NLManagedResourceDiscrete
	public var notifyUpdate: Bool?
	public var notifyEnter: Bool?
	public var notifyExit: Bool?
	protocol NLManagedResourceDelegate : class
	public struct NLResourceContinuous
	public struct NLResourceDiscrete
	public var x: Double?
	public var y: Double?
	public var x: Double?
	public var y: Double?
	public struct NLResourceProximity
	var resources = [String:NLResource]()
	init(delegate: NLManagedResourceDelegate? = nil)
	weak var delegate: NLManagedResourceDelegate?
	func == (left: NLBeacon, right: CLBeacon) -> Bool
	var delegate: NutellaLocationDelegate?
	var _configDelegate: NutellaConfigDelegate?
	var configDelegate: NutellaConfigDelegate?
	var _resourceId: String?
	var resourceId: String?
	var beacons = [String:NLBeacon]()
	var regions = [CLBeaconRegion]()
	let locationManager = CLLocationManager()
	var resources: [String]
	var _resource: NLResource?
	let net: NutellaNet
	init(locationServer: String)
	public func downloadBeaconList()
	public func downloadResourceList()
	public func subscribeResourceUpdate()
	public func startMonitoringRegions(uuids: [String])
	public func startMonitorning()
	public func stopMonitoring()
	public func locationManager(manager: CLLocationManager, didRangeBeacons: [AnyObject], inRegion: CLBeaconRegion)
	func updateResource(resource: Dictionary<String, AnyObject>)
	public func messageReceived(channel: String, message: AnyObject, componentId: String?, resourceId: String?)
	public func responseReceived(channelName: String, requestName: String?, response: AnyObject)
	func updateResource(resource: NLResource)
NutellaConfigDelegate.swift
	@objc protocol NutellaConfigDelegate
NutellaNet.swift
	class Subscription
	weak var delegate: NutellaNetDelegate?
	weak var configDelegate: NutellaConfigDelegate?
	var mqtt: SimpleMQTTClient
	var host: String
	var requests = [Int:NutellaNetRequest]()
	var subscribed = [String: Subscription]()
	var urlInit: String
	public init(host: String, clientId optionalClientId: String?)
	public func messageReceived(channel: String, message: String)
	public func disconnected()
	public func connected()
