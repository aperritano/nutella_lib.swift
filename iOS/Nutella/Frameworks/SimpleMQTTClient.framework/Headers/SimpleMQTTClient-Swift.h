// Generated by Apple Swift version 1.2 (swiftlang-602.0.49.3 clang-clang-602.0.49)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#import <SimpleMQTTClient/SimpleMQTTClient.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSTimer;
@class MQTTSession;
@class NSData;
@class NSError;


/// This class provide a simple interface that let you use the MQTT protocol
SWIFT_CLASS("_TtC16SimpleMQTTClient16SimpleMQTTClient")
@interface SimpleMQTTClient : NSObject <MQTTSessionDelegate>
@property (nonatomic) BOOL synchronous;

/// Delegate initializer.
///
/// \param synchronous If true the client is synchronous, otherwise all the functions will return immediately without waiting for acks.
///
/// \param clientId The client id used internally by the protocol. You need to have a good reason for set this, otherwise it is better to let the function generate it for you.
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithSynchronous:(BOOL)synchronous clientId:(NSString * __nullable)optionalClientId OBJC_DESIGNATED_INITIALIZER;

/// Convenience initializers. It inizialize the client and connect to a server
///
/// \param host The hostname.
///
/// \param synchronous If synchronous or not
///
/// \param clientId An optional client id, you need to have a good reason for setting this, otherwise let the system generate it for you.
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithHost:(NSString * __nonnull)host synchronous:(BOOL)synchronous clientId:(NSString * __nullable)optionalClientId;

/// Subscribe to an MQTT channel.
///
/// \param channel The name of the channel.
- (void)subscribe:(NSString * __nonnull)channel;

/// Unsubscribe from an MQTT channel.
///
/// \param channel The name of the channel.
- (void)unsubscribe:(NSString * __nonnull)channel;

/// Return an array of channels, it contains also the wildcards.
///
/// \returns Array of strings, every sstring is a channel subscribed.
- (NSArray * __nonnull)getSubscribedChannels;

/// Return true if is subscribeb or no to a channel, takes into account wildcards.
///
/// \param channel Channel name.
///
/// \returns true if is is subscribed to the channel.
- (BOOL)isSubscribed:(NSString * __nonnull)channel;

/// Return the wildcard that contains the current channel if there's any
///
/// \param channel Channel name.
///
/// \returns the String of the wildcard
- (NSString * __nullable)wildcardSubscribed:(NSString * __nonnull)channel;

/// Publish a message on the desired MQTT channel.
///
/// \param channel The name of the channel.
///
/// \param message The message.
- (void)publish:(NSString * __nonnull)channel message:(NSString * __nonnull)message;

/// Disconnect the client immediately.
- (void)disconnect;

/// Connect the client to an MQTT server.
///
/// \param host The hostname of the server.
- (void)connect:(NSString * __nonnull)host;

/// Reconnect the client to the MQTT server.
- (void)reconnect;

/// Timer callback 1.0 seconds after the disconnection
- (void)reconnect:(NSTimer * __nonnull)timer;
- (void)newMessage:(MQTTSession * __null_unspecified)session data:(NSData * __null_unspecified)data onTopic:(NSString * __null_unspecified)topic qos:(MQTTQosLevel)qos retained:(BOOL)retained mid:(uint32_t)mid;
- (void)handleEvent:(MQTTSession * __null_unspecified)session event:(MQTTSessionEvent)eventCode error:(NSError * __null_unspecified)error;
- (void)subAckReceived:(MQTTSession * __nonnull)session msgID:(uint16_t)msgID grantedQoss:(NSArray * __nonnull)grantedQoss;
- (void)unsubAckReceived:(MQTTSession * __nonnull)session msgID:(uint16_t)msgID grantedQoss:(NSArray * __nonnull)grantedQoss;
@end

#pragma clang diagnostic pop
