// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#import <SimpleMQTTClient/SimpleMQTTClient.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSTimer;
@class MQTTSession;
@class NSData;
@class NSError;
@protocol SimpleMQTTClientDelegate;


/// This class provide a simple interface that let you use the MQTT protocol
SWIFT_CLASS("_TtC16SimpleMQTTClient16SimpleMQTTClient")
@interface SimpleMQTTClient : NSObject <MQTTSessionDelegate>
@property (nonatomic) BOOL synchronous;
@property (nonatomic, weak) id <SimpleMQTTClientDelegate> _Nullable delegate;

/// <code>Delegate initializer.
/// 
/// - parameter synchronous: If true the client is synchronous, otherwise all the functions will return immediately without waiting for acks.
/// - parameter clientId: The client id used internally by the protocol. You need to have a good reason for set this, otherwise it is better to let the function generate it for you.
/// 
/// </code>
- (nonnull instancetype)initWithSynchronous:(BOOL)synchronous clientId:(NSString * _Nullable)optionalClientId OBJC_DESIGNATED_INITIALIZER;

/// <code>Convenience initializers. It inizialize the client and connect to a server
/// 
/// - parameter host: The hostname.
/// - parameter synchronous: If synchronous or not
/// - parameter clientId: An optional client id, you need to have a good reason for setting this, otherwise let the system generate it for you.
/// 
/// </code>
- (nonnull instancetype)initWithHost:(NSString * _Nonnull)host synchronous:(BOOL)synchronous clientId:(NSString * _Nullable)optionalClientId;

/// Subscribe to an MQTT channel.
///
/// \param channel The name of the channel.
- (void)subscribe:(NSString * _Nonnull)channel;

/// Unsubscribe from an MQTT channel.
///
/// \param channel The name of the channel.
- (void)unsubscribe:(NSString * _Nonnull)channel;

/// Return an array of channels, it contains also the wildcards.
///
/// \returns  Array of strings, every sstring is a channel subscribed.
- (NSArray<NSString *> * _Nonnull)getSubscribedChannels;

/// <code>Return true if is subscribeb or no to a channel, takes into account wildcards.
/// 
/// - parameter channel: Channel name.
/// - returns: true if is is subscribed to the channel.
/// 
/// </code>
- (BOOL)isSubscribed:(NSString * _Nonnull)channel;

/// Return the wildcard that contains the current channel if there's any
///
/// \param channel Channel name.
///
/// \returns  the String of the wildcard
- (NSString * _Nullable)wildcardSubscribed:(NSString * _Nonnull)channel;

/// Publish a message on the desired MQTT channel.
///
/// \param channel The name of the channel.
///
/// \param message The message.
- (void)publish:(NSString * _Nonnull)channel message:(NSString * _Nonnull)message;

/// Disconnect the client immediately.
- (void)disconnect;

/// Connect the client to an MQTT server.
///
/// \param host The hostname of the server.
- (void)connect:(NSString * _Nonnull)host;

/// Reconnect the client to the MQTT server.
- (void)reconnect;
- (void)reconnect:(NSTimer * _Nonnull)timer;
- (void)newMessage:(MQTTSession * _Null_unspecified)session data:(NSData * _Null_unspecified)data onTopic:(NSString * _Null_unspecified)topic qos:(MQTTQosLevel)qos retained:(BOOL)retained mid:(uint32_t)mid;
- (void)handleEvent:(MQTTSession * _Null_unspecified)session event:(MQTTSessionEvent)eventCode error:(NSError * _Null_unspecified)error;
- (void)subAckReceived:(MQTTSession * _Nonnull)session msgID:(uint16_t)msgID grantedQoss:(NSArray * _Nonnull)grantedQoss;
- (void)unsubAckReceived:(MQTTSession * _Nonnull)session msgID:(uint16_t)msgID grantedQoss:(NSArray * _Nonnull)grantedQoss;
@end



/// This delegate protocol allows to control the status change of the MQTT client.
SWIFT_PROTOCOL("_TtP16SimpleMQTTClient24SimpleMQTTClientDelegate_")
@protocol SimpleMQTTClientDelegate
@optional

/// Called when a new message is received
///
/// \param channel The name of the channel
///
/// \param message The message
- (void)messageReceived:(NSString * _Nonnull)channel message:(NSString * _Nonnull)message;

/// Called when the client will be disconnected.
- (void)disconnected;

/// Called when the client will be connected.
- (void)connected;
@end

#pragma clang diagnostic pop
